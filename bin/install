#!/usr/bin/env bash

set -e
set -o pipefail

install_helm() {
  local install_type=$1
  local version=$2
  local install_path=$3
  local operating_system="$(uname | tr '[:upper:]' '[:lower:]')"
  local arch="$(getArch)"
  local platform="$operating_system-$arch"
  local bin_install_path="$install_path/bin"
  local binary_path="$bin_install_path/helm"
  local download_url=$(get_download_url $version $platform)

  if [ "$TMPDIR" = "" ]; then
    local tmp_download_dir=$(mktemp -d -t helm_XXXXXX)
  else
    local tmp_download_dir=$TMPDIR
  fi

  local download_path="$tmp_download_dir/$(get_filename $version $platform)"

  echo "Downloading helm from ${download_url} to ${download_path}"
  curl --retry 10 --retry-delay 2 -Lo $download_path $download_url

  echo "Creating bin directory"
  mkdir -p "${bin_install_path}"

  echo "Cleaning previous binaries"
  rm -f $binary_path 2>/dev/null || true

  echo "Copying binary"
  tar -zxf ${download_path} --directory $tmp_download_dir
  cp ${tmp_download_dir}/${platform}/helm ${bin_install_path}
  chmod +x ${binary_path}
}


# getArch discovers the architecture for this system.
getArch() {
  if [[ $ASDF_HELM_OVERWRITE_ARCH != "" ]]; then
    echo "$ASDF_HELM_OVERWRITE_ARCH"
  else
    ARCH=$(uname -m)
    case $ARCH in
      armv5*) ARCH="armv5";;
      armv6*) ARCH="armv6";;
      armv7*) ARCH="arm";;
      arm64) ARCH="arm64";; # TODO Fix to proper when M1 packages are available
      aarch64) ARCH="arm64";;
      x86) ARCH="386";;
      x86_64) ARCH="amd64";;
      i686) ARCH="386";;
      i386) ARCH="386";;
    esac
    echo "$ARCH"
  fi
}

get_filename() {
  local version="$1"
  local platform="$2"

  echo "helm-v${version}-${platform}.tar.gz"
}

get_download_url() {
  local version="$1"
  local platform="$2"
  local filename="$(get_filename $version $platform)"
  echo "https://get.helm.sh/${filename}"
}

install_helm $ASDF_INSTALL_TYPE $ASDF_INSTALL_VERSION $ASDF_INSTALL_PATH
